module.exports = {
  user: {
    invalidId: res => res.status(200).json({ success: false, message: 'The user ID entered is not a valid' }),
    noneWithThatId: res => res.status(200).json({ success: false, message: 'There is no user with that ID stored in the database' }),
    emailInUse: res => res.status(422).json({ success: false, message: 'Email address is already in use' }),
    noneInDatabase: res => res.status(200).json({ success: false, message: 'There are no users stored in the database' }),
    doesNotExist: res => res.status(200).json({ success: false, message: 'A user with that ID does not exist' }),
    noUserRoleSet: res => res.status(200).json({ success: false, message: 'There is no standard "user" role set in the roles table' }),
    errorUpdating: res => res.status(200).json({ success: false, message: 'There was an error updating the user' }),
  },
  package: {
    invalidId: res => res.status(422).json({ success: false, message: 'The package ID entered is not valid' }),
    doesNotExist: res => res.status(200).json({ success: false, message: 'Package does not exist in the database' }),
    alreadyExists: res => res.status(422).json({ success: false, message: 'Package already exists in the database' }),
    noneWithThatCode: res => res.status(200).json({ success: false, message: 'There are no packages in the database assigned to that code' }),
    noneInDatabase: res => res.status(200).json({ success: false, message: 'There are no packages currently stored in the database' }),
    couldNotUpdate: res => res.status(500).json({ success: false, message: 'The package could not be updated in the database' }),
  },
  project: {
    invalidId: res => res.status(422).json({ success: false, message: 'The project ID entered is not valid' }),
    alreadyExists: res => res.status(422).json({ success: false, message: 'Project already exists in the database' }),
    doesNotExist: res => res.status(200).json({ success: false, message: 'Project does not exist in the database' }),
    noneWithThatCode: res => res.status(200).json({ success: true, message: 'There are no packages stored in the database with that package code' }),
    noneInDatabase: res => res.status(200).json({ success: false, message: 'There are no projects currently stored in the database' }),
    noneToDisplay: res => res.status(200).json({ success: false, message: 'There are no projects to display' }),
    couldNotUpdate: res => res.status(500).json({ success: false, message: 'The project could not be updated in the database' }),
  },
  role: {
    alreadyExists: res => res.status(422).json({ success: false, message: 'Role already exists in the database' }),
    couldNotCreate: res => res.status(422).json({ success: false, message: 'Could not create new role in the database' }),
    noneInDatabase: res => res.status(200).json({ success: false, message: 'There are no roles currently stored in the database' }),
    invalidId: res => res.status(422).json({ success: false, message: 'The role ID entered is not valid' }),
    doesNotExist: res => res.status(200).json({ success: false, message: 'Role does not exist in the database' }),
  },
  userRole: {
    roleExists: res => res.status(422).json({ success: false, message: 'This role is already assigned to the user' }),
    invalidUserId: res => res.status(422).json({ success: false, message: 'The user ID entered is not valid' }),
    invalidRoleId: res => res.status(422).json({ success: false, message: 'The role ID entered is not valid' }),
    couldNotCreate: res => res.status(422).json({ success: false, message: 'Could not allocate role to the user' }),
    noRolesFound: res => res.status(422).json({ success: false, message: 'There were no roles found for the selected user' }),
  },
  timesheet: {
    alreadyExistsForWeekEnding: res => res.status(422).json({ success: false, message: 'A timesheet already exists for this week ending data, please update instead' }),
    ensureHoursBookedForAllDays: res => res.status(200).json({ success: false, message: 'Ensure hours have been assigned to all days and that they are numbers only' }),
    noTimesheetFound: res => res.status(422).json({ success: false, message: 'There was no timesheet found for the specified user on the selected week ending date' }),
    invalidTimesheetId: res => res.status(422).json({ success: false, message: 'There was no timesheet found with the specified timesheet ID' }),
    nonIntegerDate: res => res.status(400).json({ success: false, message: 'The week ending date input should be of type integer only' }),
    weekEndingNotANumber: res => res.status(400).json({ success: false, message: 'The week ending date input must be numeric' }),
    invalidId: res => res.status(422).json({ success: false, message: 'The timesheet ID entered is not valid' }),
    couldNotUpdate: res => res.status(500).json({ success: false, message: 'The timesheet could not be updated' }),
    ensureHoursBookedAreNumeric: res => res.status(500).json({ success: false, message: 'Booked hours need to be numeric' }),
    invalidWeekEnding: res => res.status(400).json({ success: false, message: 'The week ending date is invalid' }),
    invalidTotal: (res, dayOfWeek) => res.status(400).json({ success: false, message: `Total hours booked for ${dayOfWeek} exceeds 24 hours across all projects` }),
    checkHoursBooked: (res, projectId, maxDailyHours, dayOfWeek) => res.status(400).json({ success: false, projectId, message: `Please ensure that total hours booked for ${dayOfWeek} are between 0 and ${maxDailyHours}` }),
    errorDeleting: res => res.status(500).json({ success: false, message: 'An error occured whilst attempting to delete the timesheet' }),
    couldNotLock: res => res.status(500).json({ success: false, message: 'An error occured whilst attempting to lock the timesheet' }),
    couldNotUnlock: res => res.status(500).json({ success: false, message: 'An error occured whilst attempting to unlock the timesheet' }),
    couldNotApprove: res => res.status(500).json({ success: false, message: 'An error occured whilst attempting to approve the timesheet' }),
    couldNotReject: res => res.status(500).json({ success: false, message: 'An error occured whilst attempting to reject the timesheet' }),
    noTimesheetsWithRejectedStatus: res => res.status(200).json({ success: false, message: 'There were no timesheets found with rejected status' }),
    noTimesheetsWithApprovedStatus: res => res.status(200).json({ success: false, message: 'There were no timesheets found with approved status' }),
    noTimesheetsWithSubmittedStatus: res => res.status(200).json({ success: false, message: 'There were no timesheets found with submitted status' }),
    noTimesheetsWithLockedStatus: res => res.status(200).json({ success: false, message: 'There were no timesheets found with locked status' }),
    noTimesheetsWithUnlockedStatus: res => res.status(200).json({ success: false, message: 'There were no timesheets found with unlocked status' }),
  },
  emailTemplate: {
    alreadyExists: res => res.status(422).json({ success: false, message: 'A template with this name already exists in the database'}),
    doesNotExist: res => res.status(200).json({ success: false, message: 'A template with the specified ID does not exist in the database'}),
    couldNotCreate: res => res.status(500).json({ success: false, message: 'There was an error whilst attempting to create the email template'}),
    couldNotUpdate: res => res.status(500).json({ success: false, message: 'There was an error whilst attempting to update the email template'}),
    couldNotDelete: res => res.status(500).json({ success: false, message: 'There was an error whilst attempting to delete the email template'}),
  },
  sendEmail: {
    doesNotExist: res => res.status(422).json({ success: false, message: 'Email could not be sent as a template with the specified template name does not exist in the database'}),
    couldNotSend: res => res.status(500).json({ success: false, message: 'There was an error whilst attempting to send the email'}),
  }
};
